#############################################################################################
# File: salt-owl.yaml                                                                       #
# Version: 1.00                                                                             #
# Date: 07/09/2025                                                                          #
# Licence: CC BY-NC 4.0 - See https://creativecommons.org/licenses/by-nc/4.0/ for details   #
#                         and/or review LICENCE file                                        #
#############################################################################################

esphome:
  name: salt-owl
  friendly_name: Salt Owl
  on_boot:
    priority: -100
    then:
      - delay: 5s
      - lambda: |-
          id(sensor_offset) = id(sensor_offset_input).state;
          id(tank_depth) = id(tank_depth_input).state;
          id(fill_alert_threshold) = id(fill_alert_threshold_input).state;

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "ueWZzCJLRXWIPCN5kXkbiOf+VlVTZXvA21+Sex4NO6s="

ota:
  - platform: esphome
    password: "f1448a33189e4d413db034615adb86de"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
   static_ip: 192.168.11.166
   gateway: 192.168.11.1
   subnet: 255.255.255.0


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Salt-Owl Fallback Hotspot"
    password: "zWMStNT3PBAV"

captive_portal:

# --- GLOBAL VARIABLES for use in lambdas ---
globals:
  - id: sensor_offset
    type: float
    restore_value: true
    initial_value: '4.0'

  - id: tank_depth
    type: float
    restore_value: true
    initial_value: '25.0'

  - id: fill_alert_threshold
    type: float
    restore_value: true
    initial_value: '20.0'

# --- NUMBER INPUTS to control global values from Home Assistant ---
number:
  - platform: template
    name: "Sensor Offset (cm)"
    id: sensor_offset_input
    optimistic: true
    min_value: 0
    max_value: 15
    step: 0.5
    unit_of_measurement: "cm"
    initial_value: 4.0
    on_value:
      then:
        - lambda: |-
            id(sensor_offset) = x;

  - platform: template
    name: "Tank Depth (cm)"
    id: tank_depth_input
    optimistic: true
    min_value: 10
    max_value: 100
    step: 0.5
    unit_of_measurement: "cm"
    initial_value: 25.0
    on_value:
      then:
        - lambda: |-
            id(tank_depth) = x;

  - platform: template
    name: "Fill Alert Threshold (%)"
    id: fill_alert_threshold_input
    optimistic: true
    min_value: 0
    max_value: 100
    step: 1
    unit_of_measurement: "%"
    initial_value: 20.0
    on_value:
      then:
        - lambda: |-
            id(fill_alert_threshold) = x;

# --- ULTRASONIC DISTANCE SENSORS ---
sensor:
  - platform: ultrasonic
    trigger_pin: GPIO12
    echo_pin: GPIO14
    name: "Left Chamber Sensor Distance"
    id: left_distance
    update_interval: 1h
    unit_of_measurement: "cm"
    filters:
      - multiply: 100.0
    on_value:
      then:
        - component.update: left_percent

  - platform: ultrasonic
    trigger_pin: GPIO1
    echo_pin: GPIO3
    name: "Right Chamber Sensor Distance"
    id: right_distance
    update_interval: 1h
    unit_of_measurement: "cm"
    filters:
      - multiply: 100.0
    on_value:
      then:
        - component.update: right_percent

  # --- LEFT FILL % (Internal Only) ---
  - platform: template
    id: left_percent
    unit_of_measurement: "%"
    accuracy_decimals: 0
    internal: true
    lambda: |-
      if (!id(left_distance).has_state()) return NAN;
      float dist = id(left_distance).state;
      float offset = id(sensor_offset);
      float depth = id(tank_depth);
      float empty_dist = offset + depth;
      dist = clamp(dist, offset, empty_dist);
      return 100.0 * (empty_dist - dist) / depth;

  # --- RIGHT FILL % (Internal Only) ---
  - platform: template
    id: right_percent
    unit_of_measurement: "%"
    accuracy_decimals: 0
    internal: true
    lambda: |-
      if (!id(right_distance).has_state()) return NAN;
      float dist = id(right_distance).state;
      float offset = id(sensor_offset);
      float depth = id(tank_depth);
      float empty_dist = offset + depth;
      dist = clamp(dist, offset, empty_dist);
      return 100.0 * (empty_dist - dist) / depth;

  # --- EXPOSE % FILL TO HOME ASSISTANT (Optional) ---
  - platform: copy
    source_id: left_percent
    name: "Left Chamber Fill (%)"

  - platform: copy
    source_id: right_percent
    name: "Right Chamber Fill (%)"

# --- ALERT BINARY SENSORS ---
binary_sensor:
  - platform: template
    name: "Left Chamber Fill Low"
    device_class: problem
    lambda: |-
      if (!id(left_percent).has_state()) return false;
      return id(left_percent).state < id(fill_alert_threshold);

  - platform: template
    name: "Right Chamber Fill Low"
    device_class: problem
    lambda: |-
      if (!id(right_percent).has_state()) return false;
      return id(right_percent).state < id(fill_alert_threshold);

  - platform: template
    name: "Average Fill Low"
    device_class: problem
    lambda: |-
      if (!id(left_percent).has_state() || !id(right_percent).has_state()) return false;
      float avg = (id(left_percent).state + id(right_percent).state) / 2.0;
      return avg < id(fill_alert_threshold);
